/********************
 * Sunflower.mel
 * 
 * Author:      Joel KUCZMARSKI
 * Date:        11/13/2012
 * Description: Apply texture colors to particle grid.
 *              Brighter colors are raised.
 *****************************************************/

// declare globals
global string $window,
  $colorGrp,
  $edgeGrp,
  $marginGrp,
  $sunflowers,
  $selection,
  $textureBtn,
  $applyBtn,
  $resetBtn,
  $fileTexture,
  $_results[]; // please re-use me
global int $runs = 0;

// ENTRY POINT
proc entryPoint() {
    // make sure only one window
    if (`windowPref -exists windowSunflower`)
      windowPref -remove windowSunflower;
    if (`window -exists windowSunflower`)
      deleteUI -window windowSunflower;
    
    // re-declare globals
    global string $window,
      $colorGrp,
      $edgeGrp,
      $marginGrp,
      $sunflowers,
      $selection,
      $textureBtn,
      $applyBtn,
      $resetBtn,
      $fileTexture,
      $_results[];
    
    // turn on smooth shading
    modelEditor -edit -displayAppearance smoothShaded -activeOnly false modelPanel4;
    
    // declare / define variables
    $_results  = `ls -sl`;
    $selection = $_results[0];
    
    // ensure a selection
    int $count   = `size $_results`;
    if ($count < 1)
      error_popup( "NOTHING SELECTED (select an object)" );
    
    // validate the selection
    string $_selectionType = `objectType $_results[0]`;
    if( $_selectionType != "transform")
      error_popup( "INVALID SELECTION (objects only)" );
    
    // create a popup
    $window = `window -rtf true -title "Sunflower Effect" windowSunflower`;
    columnLayout -adjustableColumn true;
      frameLayout -label "Settings" -collapsable true;
        columnLayout -columnAttach "both" 5 -rowSpacing 5 -columnWidth 500;
          $colorGrp   = `radioButtonGrp     -label "Color duplicates?"      -numberOfRadioButtons 2 -labelArray2 "Yes" "No" -select 1`;
          $edgeGrp    = `intSliderGrp       -label "Largest edge size"   -min 4 -v 20 -max 60 -field true`;
          $marginGrp  = `floatSliderGrp     -label "Margin"              -min 1 -v 2  -max 60 -field true`;
          $textureBtn = `button -label "Load Texture (*.jpg)" -command "load_texture;"`;
        setParent ..;
      setParent ..;
      frameLayout -label "Actions" -collapsable true;
        rowLayout -numberOfColumns 3;
          $applyBtn = `button -label "Apply" -command "sunflower_effect;" -en off`;
          $resetBtn = `button -label "Reset" -command "reset_scene;" -en off`;
          button -label "Cancel" -command "deleteUI $window;";
        setParent ..;
      setParent ..;
    setParent ..;
    showWindow $window;
    
    print "[sunflower success] POPUP CREATED\n";
}

// SUNFLOWER EFFECT
proc sunflower_effect() {
    global string $colorGrp,
      $edgeGrp,
      $marginGrp,
      $sunflowers,
      $selection,
      $resetBtn,
      $fileTexture,
      $_results[];
    global int $runs;
    
    print "[sunflower alert] executing sunflower effect!\n";
    
    // make sure file texture has been loaded
    if ($fileTexture == "")
     error_popup( "NO FILE TEXTURE LOADED!" );
    
    // make empty master group if missing
    int $_exists = `objExists "sunflowers"`;
    if (!$_exists) $sunflowers = `group -em -n "sunflowers"`;
    
    // get option values
    int    $edge   = `intSliderGrp   -q -v $edgeGrp`;
    float  $margin = `floatSliderGrp -q -v $marginGrp`;
    string $color  = `radioButtonGrp -q -select $colorGrp`;
    
    // make empty group
    $_group = `group -em -n ("sunflower" + $runs)`;
    parent $_group $sunflowers; // parent to master group
    
    // determine grid proportions
    float $ratio,
      $size[2] = `getAttr ($fileTexture+".outSize")`;
    int $i, $k, $gridx, $gridy;
    if ($size[0] > $size[1])
      $ratio = ($edge/$size[0]); // landscape
    else
      $ratio = ($edge/$size[1]); // portrait
    $gridx = ($size[0]*$ratio);
    $gridy = ($size[1]*$ratio);
    
    // sample proportional u's and v's from texture
    float $RGB[] = `colorAtPoint -o RGB -su $gridx -sv $gridy $fileTexture`;
    
    // make sure selected object is visible before duplication
    showHidden $selection;
    
    // create "pixels" using objecs
    for( $k = 0; $k < $gridy; $k++ ) {
      for( $i = 1; $i < $gridx; $i++ ) {
        int $head = (($i*$gridy*3)+($k*3));
        float $r = $RGB[$head];
        float $g = $RGB[$head+1];
        float $b = $RGB[$head+2];
        
        // load color data into shading node
        string $_mat = `shadingNode -asShader phong`;
        setAttr ($_mat+".color") -type double3 $r $g $b;
        
        // duplicate selection
        $_results = `duplicate $selection`;
        select -r $_results[0];
        
        if ($color == 1)
          hyperShade -assign $_mat; // apply material to duplicate
        
        // move duplicate
        move -xz (($i-($gridx/2))*$margin) (($k-($gridy/2))*$margin);
        move -y (($runs * $margin)+($margin * ($r + $g + $b)));
        
        // parent duplicate
        parent $_results[0] $_group;
      }
    }
    
    // clean up
    $runs++;
    $file = "";
    hide $selection;
    select $selection;
    
    // enable reset button
    button -e -en on $resetBtn;
    
    print "[sunflower success] EFFECT APPLIED TO SELECTION\n";
}

// LOAD FILE TEXTURE
proc load_texture() {
    global string $selection,
      $fileTexture,
      $textureBtn,
      $applyBtn;
    
    print "[sunflower alert] loading file!\n";
    
    // get file path from dialog
    string $basicFilter = "*.jpg";
    string $_result[] = `fileDialog2 -ff $basicFilter -ds 2 -fm 1`;
    
    // create file texture
    $fileTexture = create_texture( $_result[0] );
    
    // re-select selection
    select $selection;
    
    // set button label
    button -e -label $_result[0] $textureBtn;
    
    // enable apply button
    button -e -en on $applyBtn;
    
    print ("[sunflower success] LOADED FILE " + $_result[0] + " \n");
}

// CREATE FILE TEXTURE
proc string create_texture( string $filename ) {
    print "[sunflower alert] creating texture!\n";
    
	// create the file texture node
	$file = `shadingNode -asTexture file`;
	
	// set the file texture name of the file node
	setAttr -type "string" ($file+".ftn") $filename;

    print "[sunflower success] TEXTURE CREATED\n";

	return $file;
}

// RESET THE SCENE
proc reset_scene() {
    global string  $sunflowers,
      $resetBtn,
      $selection;
    global int $runs;
    
    if( yesno_popup( "Are you sure you want to reset the scene?" ) ) {
      print "[sunflower alert] resetting scene!\n";
    
      // delete all sunflowers
      delete $sunflowers;
      
      // show and select original object
      showHidden $selection;
      select $selection;
    
      // reset runs
      $runs = 0;
      
      // disable reset button
      button -e -en off $resetBtn;
      
      print "[sunflower success] SCENE RESET\n";
    }
}

// ERROR POPUP
proc error_popup( string $msg ) {
  confirmDialog
    -title "Sunflower Error!"
    -message $msg
    -button "OK"
    -defaultButton "OK";

  error ("[sunflower error] " + $msg + "\n");
}

// YES / NO POPUP
proc int yesno_popup( string $msg ) {
  string $confirm = `confirmDialog
    -title "Yes or No?"
    -message $msg
    -button "Yes"
    -button "No"
    -defaultButton "No"
    -cancelButton "No"`;

  return ($confirm == "Yes");
}

entryPoint; // call the entry point